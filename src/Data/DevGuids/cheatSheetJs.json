{
    "Console": [
      {
        "example": "// => Hello world!\nconsole.log('Hello world!');"
      },
      {
        "example": "// => Hello QuickRef.ME\nconsole.warn('hello %s', 'QuickRef.ME');"
      },
      {
        "example": "// Prints error message to stderr\nconsole.error(new Error('Oops!'));"
      }
    ],
    "Numbers": [
      {
        "example": "let amount = 6;\nlet price = 4.99;"
      }
    ],
    "Variables": [
      {
        "example": "let x = null;\nlet name = \"Tammy\";\nconst found = false;\n// => Tammy, false, null\nconsole.log(name, found, x);"
      },
      {
        "example": "var a;\nconsole.log(a); // => undefined"
      }
    ],
    "Strings": [
      {
        "example": "let single = 'Wheres my bandit hat?';\nlet double = \"Wheres my bandit hat?\";\n// => 21\nconsole.log(single.length);"
      }
    ],
    "Arithmetic Operators": [
      {
        "example": "5 + 5 = 10     // Addition\n10 - 5 = 5     // Subtraction\n5 * 10 = 50    // Multiplication\n10 / 5 = 2     // Division\n10 % 5 = 0     // Modulo"
      }
    ],
    "Comments": [
      {
        "example": "// This line will denote a comment\n/*  \nThe below configuration must be \nchanged before deployment. \n*/"
      }
    ],
    "Assignment Operators": [
      {
        "example": "let number = 100;\n// Both statements will add 10\nnumber = number + 10;\nnumber += 10;\nconsole.log(number); \n// => 120"
      }
    ],
    "String Interpolation": [
      {
        "example": "let age = 7;\n// String concatenation\n'Tommy is ' + age + ' years old.';\n// String interpolation\n`Tommy is ${age} years old.`;"
      }
    ],
    "let Keyword": [
      {
        "example": "let count; \nconsole.log(count); // => undefined\ncount = 10;\nconsole.log(count); // => 10"
      }
    ],
    "const Keyword": [
      {
        "example": "const numberOfColumns = 4;\n// TypeError: Assignment to constant...\nnumberOfColumns = 8;"
      }
    ],
    "#JavaScript Conditionals": [
      {
        "example": "if (isMailSent) {\n  console.log('Mail sent to recipient');\n}"
      }
    ],
    "Ternary Operator": [
      {
        "example": "var x=1;\n// => true\nresult = (x == 1) ? true : false;"
      }
    ],
    "Operators": [
      {
        "example": "true || false;       // true\n10 > 5 || 10 > 20;   // true\nfalse || false;      // false\n10 > 100 || 10 > 20; // false"
      }
    ],
    "Logical Operator &&": [
      {
        "example": "true && true;        // true\n1 > 2 && 2 > 1;      // false\ntrue && false;       // false\n4 === 4 && 3 > 1;    // true"
      }
    ],
    "Comparison Operators": [
      {
        "example": "1 > 3                // false\n3 > 1                // true\n250 >= 250           // true\n1 === 1              // true\n1 === 2              // false\n1 === '1'            // false"
      }
    ],
    "Logical Operator !": [
      {
        "example": "let lateToWork = true;\nlet oppositeValue = !lateToWork;\n// => false\nconsole.log(oppositeValue); "
      }
    ],
    "Nullish coalescing operator ??": [
      {
        "example": "null ?? 'I win';           //  'I win'\nundefined ?? 'Me too';     //  'Me too'\nfalse ?? 'I lose'          //  false\n0 ?? 'I lose again'        //  0\n'' ?? 'Damn it'            //  ''"
      }
    ],
    "else if": [
      {
        "example": "const size = 10;\n\nif (size > 100) {\n  console.log('Big');\n} else if (size > 20) {\n  console.log('Medium');\n} else if (size > 4) {\n  console.log('Small');\n} else {\n  console.log('Tiny');\n}\n// Print: Small"
      }
    ],
    "switch Statement": [
      {
        "example": "const food = 'salad';\n\nswitch (food) {\n  case 'oyster':\n    console.log('The taste of the sea');\n    break;\n  case 'pizza':\n    console.log('A delicious pie');\n    break;\n  default:\n    console.log('Enjoy your meal');\n}"
      }
    ],
    "== vs ===": [
      {
        "example": "0 == false   // true\n0 === false  // false, different type\n1 == \"1\"     // true,  automatic type conversion \n1 === \"1\"    // false, different type\nnull == undefined  // true\nnull === undefined // false\n'0' == false       // true\n'0' === false      // false\nThe == just check the value, === check both the value and the type."
      }
    ],
    "JavaScript Functions": [
      {
        "example": "// Defining the function:\nfunction sum(num1, num2) {\n  return num1 + num2;\n}\n\n// Calling the function:\nsum(3, 6); // 9"
      },
      {
        "example": "// Named function\nfunction rocketToMars() {\n  return 'BOOM!';\n}\n\n// Anonymous function\nconst rocketToMars = function() {\n  return 'BOOM!';\n}"
      },
      {
        "example": "const sum = (param1, param2) => { \n  return param1 + param2; \n}; \nconsole.log(sum(2,5)); // => 7 "
      },
      {
        "example": "const printHello = () => { \n  console.log('hello'); \n}; \nprintHello(); // => hello"
      },
      {
        "example": "const checkWeight = weight => { \n  console.log(`Weight : ${weight}`); \n}; \ncheckWeight(25); // => Weight : 25 "
      },
      {
        "example": "const multiply = (x, y) => x * y;\nconsole.log(multiply(2, 3)); // => 6"
      }
    ],
    "Named Functions": [
      {
        "example": "function getTriangleArea(base, height) { \n  return base * height / 2; \n}"
      }
    ],
    "Arrow Functions": [
      {
        "example": "const sum = (a, b) => a + b;\nconsole.log(sum(5, 3)); // => 8"
      }
    ],
    "Function Declaration": [
      {
        "example": "function greeting() { \n  return 'Hello World!'; \n}"
      }
    ],
    "Function Expressions": [
      {
        "example": "const greeting = function() { \n  return 'Hello World!'; \n};"
      }
    ],
    "Return Keyword": [
      {
        "example": "function add(a, b) {\n  return a + b;\n}\n\nconst result = add(3, 5);\nconsole.log(result); // => 8"
      }
    ],
    "Scope": [
      {
        "example": "let x = 10;\nif (true) {\n  let y = 20;\n  console.log(x + y); // => 30\n}\nconsole.log(x + y); // => ReferenceError: y is not defined"
      }
    ],
    "Function Invocation": [
      {
        "example": "function greet(name) {\n  return 'Hello, ' + name;\n}\n\nconst greeting = greet('John');\nconsole.log(greeting); // => Hello, John"
      }
    ],
    "Arguments": [
      {
        "example": "function sayHi() {\n  console.log(arguments);\n}\n\nsayHi('John', 'Doe');\n// => { '0': 'John', '1': 'Doe' }"
      }
    ],
    "Parameters": [
      {
        "example": "function greet(firstName, lastName) {\n  return 'Hello, ' + firstName + ' ' + lastName;\n}\n\nconsole.log(greet('John', 'Doe')); // => Hello, John Doe"
      }
    ],
    "Recursion": [
      {
        "example": "function factorial(n) {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n\nconsole.log(factorial(5)); // => 120"
      }
    ],
    "Default Parameters": [
      {
        "example": "function greet(name = 'World') {\n  return 'Hello, ' + name;\n}\n\nconsole.log(greet()); // => Hello, World\nconsole.log(greet('John')); // => Hello, John"
      }
    ],
    "Rest Parameters": [
      {
        "example": "function sum(...args) {\n  return args.reduce((total, num) => total + num);\n}\n\nconsole.log(sum(1, 2, 3)); // => 6"
      }
    ],
    "Spread Operator": [
      {
        "example": "const arr1 = [1, 2, 3];\nconst arr2 = [...arr1, 4, 5];\nconsole.log(arr2); // => [1, 2, 3, 4, 5]"
      }
    ],
    "Closure": [
      {
        "example": "function outer() {\n  const outerVar = 'I am outside!';\n  function inner() {\n    console.log(outerVar);\n  }\n  return inner;\n}\n\nconst innerFn = outer();\ninnerFn(); // => I am outside!"
      }
    ],
    "Higher-Order Functions": [
      {
        "example": "function multiplyBy(num) {\n  return function(x) {\n    return x * num;\n  }\n}\n\nconst multiplyByTwo = multiplyBy(2);\nconsole.log(multiplyByTwo(4)); // => 8"
      }
    ],
    "Callbacks": [
      {
        "example": "function greet(callback) {\n  callback();\n}\n\ngreet(function() {\n  console.log('Hello!');\n}); // => Hello!"
      }
    ],
    "Array.map()": [
      {
        "example": "const numbers = [1, 2, 3, 4];\nconst doubled = numbers.map(function(num) {\n  return num * 2;\n});\n\nconsole.log(doubled); // => [2, 4, 6, 8]"
      }
    ],
    "Array.filter()": [
      {
        "example": "const numbers = [1, 2, 3, 4, 5];\nconst evens = numbers.filter(function(num) {\n  return num % 2 === 0;\n});\n\nconsole.log(evens); // => [2, 4]"
      }
    ],
    "Array.reduce()": [
      {
        "example": "const numbers = [1, 2, 3, 4, 5];\nconst sum = numbers.reduce(function(total, num) {\n  return total + num;\n}, 0);\n\nconsole.log(sum); // => 15"
      }
    ],
    "Array.forEach()": [
      {
        "example": "const numbers = [1, 2, 3, 4, 5];\nnumbers.forEach(function(num) {\n  console.log(num);\n});\n\n// => 1, 2, 3, 4, 5"
      }
    ],
    "Array.every()": [
      {
        "example": "const numbers = [2, 4, 6, 8, 10];\nconst allEven = numbers.every(function(num) {\n  return num % 2 === 0;\n});\n\nconsole.log(allEven); // => true"
      }
    ],
    "Array.some()": [
      {
        "example": "const numbers = [1, 3, 5, 7, 8];\nconst hasEven = numbers.some(function(num) {\n  return num % 2 === 0;\n});\n\nconsole.log(hasEven); // => true"
      }
    ],
    "Array.find()": [
      {
        "example": "const numbers = [1, 2, 3, 4, 5];\nconst found = numbers.find(function(num) {\n  return num > 3;\n});\n\nconsole.log(found); // => 4"
      }
    ],
    "Array.findIndex()": [
      {
        "example": "const numbers = [10, 20, 30, 40, 50];\nconst index = numbers.findIndex(function(num) {\n  return num === 30;\n});\n\nconsole.log(index); // => 2"
      }
    ],
    "Array.includes()": [
      {
        "example": "const numbers = [1, 2, 3, 4, 5];\nconst hasThree = numbers.includes(3);\nconst hasTen = numbers.includes(10);\n\nconsole.log(hasThree); // => true\nconsole.log(hasTen); // => false"
      }
    ],
    "String.includes()": [
      {
        "example": "const str = 'Hello, World!';\nconst hasHello = str.includes('Hello');\nconst hasGoodbye = str.includes('Goodbye');\n\nconsole.log(hasHello); // => true\nconsole.log(hasGoodbye); // => false"
      }
    ],
    "String.split()": [
      {
        "example": "const str = 'apple,banana,orange';\nconst fruits = str.split(',');\n\nconsole.log(fruits); // => ['apple', 'banana', 'orange']"
      }
    ],
    "String.trim()": [
      {
        "example": "const str = '   Hello, World!   ';\nconst trimmed = str.trim();\n\nconsole.log(trimmed); // => 'Hello, World!'"
      }
    ],
    "String.toUpperCase()": [
      {
        "example": "const str = 'hello';\nconst upper = str.toUpperCase();\n\nconsole.log(upper); // => 'HELLO'"
      }
    ],
    "String.toLowerCase()": [
      {
        "example": "const str = 'HELLO';\nconst lower = str.toLowerCase();\n\nconsole.log(lower); // => 'hello'"
      }
    ],
    "Template Literals": [
      {
        "example": "const name = 'John';\nconst age = 30;\n\nconst greeting = `Hello, my name is ${name} and I'm ${age} years old.`;\nconsole.log(greeting); // => Hello, my name is John and I'm 30 years old."
      }
    ],
    "Array.every() method": [
      {
        "example": "const numbers = [2, 4, 6, 8, 10];\nconst allEven = numbers.every(function(num) {\n  return num % 2 === 0;\n});\n\nconsole.log(allEven); // => true"
      }
    ]
  } 
  